@using Codesanook.EventManagement.Models
@using Codesanook.EventManagement.Controllers
@using Codesanook.AmazonS3.Controllers

@{
    Script.Require("React").AtHead();
    Script.Require("ReactDOM").AtHead();
    Script.Include("codesanook-event-management.js").AtHead();
    Style.Include("codesanook-event-management.css").AtHead();

    var actionUrl = Url.Action(
        nameof(EventBookingController.InformPayment),
        "EventBooking",
        new
        {
            area = "Codesanook.EventManagement",
            eventBookingId = ViewContext.RouteData.Values["eventBookingId"]
        }
    );

    var eventBooking = Model.EventBooking as EventBookingRecord;
    var fileUrl = Url.Action(
        nameof(FileController.GetFile),
        "File",
        new
        {
            area = "Codesanook.AmazonS3",
            fileKey = eventBooking.PaymentConfirmationAttachementFileKey
        }
    );

    var className = "light";
    var shouldAllowUploadPaymentFile = true;
    var shouldShowAttachedPaymentFileModal = true;

    switch (eventBooking.Status)
    {
        // Filter out unconfirm by user
        //case EventBookingStatus.Uncomfirmed:
        //    className = "light";
        //    shouldAllowUploadPaymentFile = false;
        //    shouldShowAttachedPaymentFileModal = false;
        //    break;

        // Filter out cancel by user, admin
        case EventBookingStatus.Cancelled: // Cancel never hit upload payment file
            className = "danger";
            shouldAllowUploadPaymentFile = false; // nothing to do
            shouldShowAttachedPaymentFileModal = false; // nothing to do
            break;

        case EventBookingStatus.WaitingForPayment:
            className = "primary";
            shouldShowAttachedPaymentFileModal = false;
            break;

        case EventBookingStatus.VerifyingPayment:
            className = "info";
            shouldAllowUploadPaymentFile = false;
            break;

        case EventBookingStatus.Successful:
            className = "success";
            shouldAllowUploadPaymentFile = false;
            break;

        case EventBookingStatus.InvalidPayment: // end result => cancel
            className = "warning";
            shouldShowAttachedPaymentFileModal = true; // Allow to upload payment file again
            break;

        case EventBookingStatus.Refunded: // end result
            className = "secondary";
            shouldAllowUploadPaymentFile = false; // No point to show payment file
            shouldShowAttachedPaymentFileModal = false;
            break;
    }
}

<div class="alert alert-@className text-center">
    @*TO DO solve label with localization*@
    <strong>Status</strong> @eventBooking.Status.ToString()
</div>

@if (shouldShowAttachedPaymentFileModal)
{
    @Html.React(
        "CodesanookEventManagement.AttachedPaymentFileModal",
        new { attachedPaymentFileUrl = fileUrl }
    )
}

<a class="btn btn-link mb-2 mr-10" href="@Url.Action(nameof(EventBookingController.Index))">
    < Back
</a>

@if (shouldAllowUploadPaymentFile)
{
    using (Html.BeginFormAntiForgeryPost(
            actionUrl,
            FormMethod.Post,
            new { enctype = "multipart/form-data" }
        ))
    {
        <div class="form-row align-items-center justify-content-center">
            <div class="col-auto">
                <div class="custom-file mb-2">
                    <input type="file" class="custom-file-input" id="customFile" name="postedFile">
                    <label class="custom-file-label" for="customFile">Choose file</label>
                </div>
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-primary mb-2">Upload slip</button>
            </div>
        </div>
    }
}

@* Reuse EventShape *@
@Display(Model.EventShape)

